import os
from langchain_community.chat_models import ChatZhipuAI
from langchain_community.embeddings import ZhipuAIEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_community.document_loaders import PyPDFLoader
from langchain.chains import RetrievalQA

import gradio as gr

# you can use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings("ignore")

# LLM
def get_llm():
    model_id = 'glm-4-plus'
    parameters = {
        "max_new_tokens": 512,  # Specify the max tokens you want to generate
        "temperature": 0.5,  # This randomness or creativity of the model's responses
    }
    model =  ChatZhipuAI(
        model_id=model_id,
        api_key=os.getenv("ZHIPUAI_API_KEY"),  # Ensure you have set your ZhipuAI API key in the environment variables
        params=parameters,
    )
    return model

# Document Loader
def document_loader(file):
    loader = PyPDFLoader(file.name)
    loaded_documents = loader.load()
    return loaded_documents

# Text Splitter
def text_splitter(data):
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=2000,
        chunk_overlap=500,
        length_function=len,
        is_separator_regex=False,
    )
    chunks = text_splitter.split_documents(data)
    return chunks

## Vector db
def vector_database(chunks):
    embedding_model = ZhipuAIEmbeddings(
        api_key=os.getenv("ZHIPUAI_API_KEY"),  # Ensure you have set your ZhipuAI API key in the environment variables
    )
    vector_db = Chroma.from_documents(
        chunks,
        embedding_model,
    )
    return vector_db

## Embedding model
def zhipuai_embedding():
    zhipuai_embedding = ZhipuAIEmbeddings(
        api_key=os.getenv("ZHIPUAI_API_KEY"),  # Ensure you have set your ZhipuAI API key in the environment variables
    )
    return zhipuai_embedding

## Retriever
def retriever(file):
    splits = document_loader(file)
    chunks = text_splitter(splits)
    vector_db = vector_database(chunks)
    retriever = vector_db.as_retriever()
    return retriever

## QA Chain
def retriever_qa(file, query):
    llm = get_llm()
    retriever_obj = retriever(file)
    qa = RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff",
        retriever=retriever_obj,
        return_source_documents=False,
    )
    response = qa.invoke(query)
    return response['result']

# Create Gradio interface
rag_application = gr.Interface(
    fn=retriever_qa,
    allow_flagging="never",
    inputs=[
        gr.File(label="Upload PDF File", file_count="single", file_types=['.pdf'], type="filepath"),  # Drag and drop file upload
        gr.Textbox(label="Input Query", lines=2, placeholder="Type your question here...")
    ],
    outputs=gr.Textbox(label="Output"),
    title="RAG Chatbot",
    description="Upload a PDF document and ask any question. The chatbot will try to answer using the provided document."
)

# Launch the app
rag_application.launch(server_name="0.0.0.0", server_port= 7881)